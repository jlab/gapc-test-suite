Grammar special9 types:
#CHAR (char)
#REGION (<Input-Sub-Sequence-Type>)
a ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] |
   

b ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] y(Sig answer< [Sig answer] >, char< char >, ) |
   

c ([Sig answer]) = [Sig answer] u(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, Sig answer< [Sig answer] >, ) |
   

d ([Sig answer]) = [Sig answer] v(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

start ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] |
   


List elimination iteration: 0

Grammar special9 types:
#CHAR (char)
#REGION (<Input-Sub-Sequence-Type>)
a ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] |
   

b ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] y(Sig answer< [Sig answer] >, char< char >, ) |
   

c ([Sig answer]) = [Sig answer] u(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, Sig answer< [Sig answer] >, ) |
   

d ([Sig answer]) = [Sig answer] v(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

start ([Sig answer]) = [Sig answer] x(char< char >, Sig answer< [Sig answer] >, ) |
   [Sig answer] |
   


