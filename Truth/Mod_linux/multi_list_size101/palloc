Grammar Pal types:
#CHAR (char)
#SEQ1 (int)
pal ([string]) = [string] match(char< char >, string< [string] >, char< char >, ) |
   [string] empty(int< int >, ) |
   

sl ([string]) = [string] skipl(char< char >, string< [string] >, ) |
   [string] |
   

sr ([string]) = [string] skipr(string< [string] >, char< char >, ) |
   [string] |
   




Const list annotation iteration: 0

#CHAR [1]

#SEQ1 [1]



pal [0] = [0]match(|1|<1 CHAR>, |0|<0 pal>, |1|<1 CHAR>, ) | [1]empty(|1|<1 SEQ1>, ) | 

sl [0] = [0]skipl(|1|<1 CHAR>, |0|<0 sl>, ) | <0 sr> | 

sr [0] = [0]skipr(|0|<0 sr>, |1|<1 CHAR>, ) | <0 pal> | 


Const list annotation iteration: 1

#CHAR [1]

#SEQ1 [1]



pal [0] = [0]match(|1|<1 CHAR>, |0|<0 pal>, |1|<1 CHAR>, ) | [1]empty(|1|<1 SEQ1>, ) | 

sl [0] = [0]skipl(|1|<1 CHAR>, |0|<0 sl>, ) | <0 sr> | 

sr [0] = [0]skipr(|0|<0 sr>, |1|<1 CHAR>, ) | <0 pal> | 


Const list annotation iteration: 2

#CHAR [1]

#SEQ1 [1]



pal [0] = [0]match(|1|<1 CHAR>, |0|<0 pal>, |1|<1 CHAR>, ) | [1]empty(|1|<1 SEQ1>, ) | 

sl [0] = [0]skipl(|1|<1 CHAR>, |0|<0 sl>, ) | <0 sr> | 

sr [0] = [0]skipr(|0|<0 sr>, |1|<1 CHAR>, ) | <0 pal> | 


Const list post: 3

#CHAR [1]

#SEQ1 [1]



pal [n] = [n]match(|1|<1 CHAR>, |n|<n pal>, |1|<1 CHAR>, ) | [1]empty(|1|<1 SEQ1>, ) | 

sl [n] = [n]skipl(|1|<1 CHAR>, |n|<n sl>, ) | <n sr> | 

sr [n] = [n]skipr(|n|<n sr>, |1|<1 CHAR>, ) | <n pal> | 
