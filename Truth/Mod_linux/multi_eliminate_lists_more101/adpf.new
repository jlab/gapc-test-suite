Grammar fold types:
#BASE (<Input-Sub-Sequence-Type>)
#EMPTY (void)
#LOC (<Input-Sub-Sequence-Type>)
#REGION (<Input-Sub-Sequence-Type>)
closed ([integer]) = [integer]{ [integer] | [integer] | [integer] | [integer] | [integer] | [integer] | }  |
   	# h [integer]


dangle ([integer]) = [integer] dlr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

hairpin ([integer]) = [integer] hl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type>{ <Input-Sub-Sequence-Type> | }  >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

iloop ([integer]) = [integer] il(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h [integer]


leftB ([integer]) = [integer] bl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h [integer]


ml_comps ([integer]) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] append(integer< [integer]{ [integer] ul(integer< [integer] >, ) | }  >, integer< [integer] >, ) |
   	# h_l [integer]


ml_comps1 ([integer]) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] append(integer< [integer] ul(integer< [integer] >, ) >, integer< [integer] >, ) |
   [integer] ul(integer< [integer] >, ) |
   [integer] addss(integer< [integer] ul(integer< [integer] >, ) >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h_l [integer]


multiloop ([integer]) = [integer] ml(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

rightB ([integer]) = [integer] br(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h [integer]


stack ([integer]) = [integer] sr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

struct ([integer]) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] cadd(integer< [integer] >, integer< [integer] >, ) |
   [integer] nil(void< void >, ) |
   	# h_s [integer]



Warning: 
  choice [integer] h([integer] es) {
                   ^
adpf.new:87.20: Last statement is not return - cannot eliminate list.
Warning: 
  choice [integer] h_l([integer] es) {
                   ^-^
adpf.new:94.20-22: Last statement is not return - cannot eliminate list.
Warning: 
  choice [integer] h_s([integer] es) {
                   ^-^
adpf.new:101.20-22: Last statement is not return - cannot eliminate list.
List elimination iteration: 0

Grammar fold types:
#BASE (<Input-Sub-Sequence-Type>)
#EMPTY (void)
#LOC (<Input-Sub-Sequence-Type>)
#REGION (<Input-Sub-Sequence-Type>)
closed (integer) = [integer]{ [integer] | [integer] | [integer] | [integer] | [integer] | [integer] | }  |
   	# h integer


dangle (integer) = integer dlr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

hairpin (integer) = integer hl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type>{ <Input-Sub-Sequence-Type> | }  >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

iloop (integer) = [integer] il(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


leftB (integer) = [integer] bl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


ml_comps (integer) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] append(integer< integer{ integer ul(integer< integer >, ) | }  >, integer< [integer] >, ) |
   	# h_l integer


ml_comps1 (integer) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] append(integer< integer ul(integer< integer >, ) >, integer< [integer] >, ) |
   integer ul(integer< integer >, ) |
   [integer] addss(integer< integer ul(integer< integer >, ) >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h_l integer


multiloop (integer) = integer ml(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

rightB (integer) = [integer] br(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


stack (integer) = integer sr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

struct (integer) = [integer] sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< [integer] >, ) |
   [integer] cadd(integer< integer >, integer< [integer] >, ) |
   integer nil(void< void >, ) |
   	# h_s integer



List elimination iteration: 1

Grammar fold types:
#BASE (<Input-Sub-Sequence-Type>)
#EMPTY (void)
#LOC (<Input-Sub-Sequence-Type>)
#REGION (<Input-Sub-Sequence-Type>)
closed (integer) = [integer]{ integer | integer | integer | integer | integer | integer | }  |
   	# h integer


dangle (integer) = integer dlr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

hairpin (integer) = integer hl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type>{ <Input-Sub-Sequence-Type> | }  >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

iloop (integer) = [integer] il(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


leftB (integer) = [integer] bl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


ml_comps (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] append(integer< integer{ integer ul(integer< integer >, ) | }  >, integer< integer >, ) |
   	# h_l integer


ml_comps1 (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] append(integer< integer ul(integer< integer >, ) >, integer< integer >, ) |
   integer ul(integer< integer >, ) |
   [integer] addss(integer< integer ul(integer< integer >, ) >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h_l integer


multiloop (integer) = integer ml(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

rightB (integer) = [integer] br(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


stack (integer) = integer sr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

struct (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] cadd(integer< integer >, integer< integer >, ) |
   integer nil(void< void >, ) |
   	# h_s integer



List elimination iteration: 2

Grammar fold types:
#BASE (<Input-Sub-Sequence-Type>)
#EMPTY (void)
#LOC (<Input-Sub-Sequence-Type>)
#REGION (<Input-Sub-Sequence-Type>)
closed (integer) = [integer]{ integer | integer | integer | integer | integer | integer | }  |
   	# h integer


dangle (integer) = integer dlr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

hairpin (integer) = integer hl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type>{ <Input-Sub-Sequence-Type> | }  >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

iloop (integer) = [integer] il(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


leftB (integer) = [integer] bl(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


ml_comps (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] append(integer< integer{ integer ul(integer< integer >, ) | }  >, integer< integer >, ) |
   	# h_l integer


ml_comps1 (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] append(integer< integer ul(integer< integer >, ) >, integer< integer >, ) |
   integer ul(integer< integer >, ) |
   [integer] addss(integer< integer ul(integer< integer >, ) >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h_l integer


multiloop (integer) = integer ml(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

rightB (integer) = [integer] br(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   	# h integer


stack (integer) = integer sr(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, <Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, ) |
   

struct (integer) = integer sadd(<Input-Sub-Sequence-Type>< <Input-Sub-Sequence-Type> >, integer< integer >, ) |
   [integer] cadd(integer< integer >, integer< integer >, ) |
   integer nil(void< void >, ) |
   	# h_s integer



